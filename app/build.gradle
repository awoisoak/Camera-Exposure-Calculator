import com.github.triplet.gradle.androidpublisher.ReleaseStatus
import com.github.triplet.gradle.androidpublisher.ResolutionStrategy

plugins {
    id 'com.android.application'
    id 'com.github.triplet.play' version "3.7.0"
}

// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file("keystore.properties")
// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()

if (keystorePropertiesFile.exists()) {
    // Load your keystore.properties file into the keystoreProperties object.
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}


android {
    signingConfigs {
        release {
            if (keystorePropertiesFile.exists()) {
                // When signing locally it will obtain the data from keystore.properties file (added to .gitignore)
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storePassword keystoreProperties['storePassword']
                storeFile file(keystoreProperties['storeFile'])
            } else {
                // Copy the upload-key-camera-exposure.jks (generated by Github action) from the temporary Github workflow folder to our app folder
                def tmpFilePath = System.getProperty("user.home") + "/work/_temp/keystore/"
                def allFilesFromDir = new File(tmpFilePath).listFiles()
                if (allFilesFromDir != null) {
                    def keystoreFile = allFilesFromDir.first()
                    keystoreFile.renameTo("upload-key-camera-exposure.jks")
                }
                // When signing from Github actions it will use env variables and the upload-key-camera-exposure.jks (both generated by Github action)
                keyAlias System.getenv('SIGNING_KEY_ALIAS') ?: error("Error!")
                keyPassword System.getenv('SIGNING_KEY_PASSWORD') ?: error("Error!")
                storePassword System.getenv('SIGNING_STORE_PASSWORD') ?: error("Error!")
                storeFile file("upload-key-camera-exposure.jks") ?: error("Error!")
            }
        }
    }
    compileSdkVersion 31
    defaultConfig {
        applicationId "com.awoisoak.exposure"
        minSdkVersion 21
        targetSdkVersion 31
        versionCode 7
        versionName "1.7"
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation('androidx.test.espresso:espresso-core:3.1.0', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })


    implementation 'com.jakewharton:butterknife:10.2.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.2.0'
    implementation 'com.google.android.material:material:1.0.0'
}

play {
    enabled.set(System.getenv("CI") == "true")
    track.set("internal")
    defaultToAppBundles.set(true)
    userFraction.set(0.1d)
    resolutionStrategy.set(ResolutionStrategy.FAIL)
    releaseStatus.set(ReleaseStatus.IN_PROGRESS)
}
